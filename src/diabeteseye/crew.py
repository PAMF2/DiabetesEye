"""DiabetesEye Crew configuration aligned with CrewAI standard architecture."""
from __future__ import annotations

from typing import Any, Dict

from crewai import Crew
from crewai.process import Process
from crewai.task import Task
from crewai.project import (
    CrewBase,
    agent,
    before_kickoff,
    crew,
    llm,
    output_json,
    task,
)
from pydantic import BaseModel, Field

from .agents.agents import (
    ClinicalIntegratorAgent,
    DRClassifierAgent,
    FollowUpPlannerAgent,
    PreprocessingAgent,
    ProgressionPredictorAgent,
)
from .agents.llm import GeminiFlashLLM, LLMClient


@CrewBase
class DiabetesEyeCrew:
    """Crew definition referencing YAML configs and deterministic agents."""

    agents_config = "config/agents.yaml"
    tasks_config = "config/tasks.yaml"

    def __init__(self) -> None:
        self.shared_state: Dict[str, Any] = {}
        self._llm_client = LLMClient()
        super().__init__()

    @llm
    def gemini_flash(self) -> GeminiFlashLLM:
        return GeminiFlashLLM(model="gemini-2.0-flash", client=self._llm_client)

    @output_json
    class PreprocessingOutput(BaseModel):
        quality_score: float = Field(..., description="Image quality score between 0 and 100")
        gradable: bool = Field(..., description="Indicates if the image is gradable")
        issues: list[str] = Field(default_factory=list, description="List of detected quality issues")
        focus_measure: float | None = Field(default=None, description="LAPM/variance focus measure when available")
        explanation: str = Field(..., description="Portuguese explanation generated by the LLM")
        image_uri: str = Field(..., description="URI used during preprocessing")

    @output_json
    class DRClassificationOutput(BaseModel):
        dr_grade: int = Field(..., description="Diabetic retinopathy grade (0-4)")
        confidence: float = Field(..., description="Confidence score between 0 and 1")
        lesions: Dict[str, float | int] = Field(default_factory=dict, description="Mapping of lesion type to count/intensity")
        image_uri: str = Field(..., description="Image analysed for grading")
        explanation: str = Field(..., description="LLM rationale summarising the grading")

    @output_json
    class ProgressionOutput(BaseModel):
        p6: float = Field(..., description="6-month progression probability")
        p12: float = Field(..., description="12-month progression probability")
        p24: float = Field(..., description="24-month progression probability")
        explanation: str = Field(..., description="LLM summary of the risk profile")

    @output_json
    class ClinicalIntegrationOutput(BaseModel):
        risk_category: str = Field(..., description="Risk category combining image and clinical data")
        monitoring: str = Field(..., description="Recommended monitoring cadence")
        explanation: str = Field(..., description="Narrative synthesising clinical recommendations")

    @output_json
    class FollowUpOutput(BaseModel):
        patient_report: str = Field(..., description="Path to patient-facing PDF report")
        physician_report: str = Field(..., description="Path to clinician PDF report")
        plan: str = Field(..., description="Textual follow-up plan")

    @agent
    def preprocessing_agent(self) -> PreprocessingAgent:
        cfg = dict(self.agents_config["preprocessing_agent"])
        cfg.setdefault("name", "preprocessing_agent")
        return PreprocessingAgent(shared_state=self.shared_state, llm_client=self._llm_client, **cfg)

    @agent
    def dr_classifier_agent(self) -> DRClassifierAgent:
        cfg = dict(self.agents_config["dr_classifier_agent"])
        cfg.setdefault("name", "dr_classifier_agent")
        return DRClassifierAgent(shared_state=self.shared_state, llm_client=self._llm_client, **cfg)

    @agent
    def progression_predictor_agent(self) -> ProgressionPredictorAgent:
        cfg = dict(self.agents_config["progression_predictor_agent"])
        cfg.setdefault("name", "progression_predictor_agent")
        return ProgressionPredictorAgent(shared_state=self.shared_state, llm_client=self._llm_client, **cfg)

    @agent
    def clinical_integrator_agent(self) -> ClinicalIntegratorAgent:
        cfg = dict(self.agents_config["clinical_integrator_agent"])
        cfg.setdefault("name", "clinical_integrator_agent")
        return ClinicalIntegratorAgent(shared_state=self.shared_state, llm_client=self._llm_client, **cfg)

    @agent
    def followup_planner_agent(self) -> FollowUpPlannerAgent:
        cfg = dict(self.agents_config["followup_planner_agent"])
        cfg.setdefault("name", "followup_planner_agent")
        return FollowUpPlannerAgent(shared_state=self.shared_state, llm_client=self._llm_client, **cfg)

    @task
    def preprocessing_task(self) -> Task:
        return Task(**self.tasks_config["preprocessing_task"])

    @task
    def dr_classification_task(self) -> Task:
        return Task(**self.tasks_config["dr_classification_task"])

    @task
    def progression_task(self) -> Task:
        return Task(**self.tasks_config["progression_task"])

    @task
    def clinical_integration_task(self) -> Task:
        return Task(**self.tasks_config["clinical_integration_task"])

    @task
    def followup_task(self) -> Task:
        return Task(**self.tasks_config["followup_task"])

    @before_kickoff
    def reset_state(self, inputs: Dict[str, Any]) -> Dict[str, Any]:
        self.shared_state.clear()
        return inputs or {}

    @crew
    def diabeteseye(self) -> Crew:
        crew = Crew(
            name="diabeteseye_standard",
            agents=self.agents,
            tasks=self.tasks,
            process=Process.sequential,
            verbose=bool(self.tasks_config.get("settings", {}).get("verbose", False)),
        )
        return crew


def build_crew() -> Crew:
    """Factory helper for compatibility with previous entry points."""
    return DiabetesEyeCrew().diabeteseye()
